tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m[i,], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
title(main = ord[i], font.main = 1)
}
#Set up plot
par(mfrow = c(30,1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(unique(pred$Strain))){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m[i,], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
title(main = ord[i], font.main = 1)
}
tmp
i
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
tmp
ord[i]
ord
rev(order(ord))
ord
rev(ord)
#Order
ord = rev(phylo$tip.label)
#Set up plot
par(mfrow = c(length(ord),1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m[i,], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
#title(main = ord[i], font.main = 1)
}
g = unlist(lapply(strsplit(ord), function(x) x[2]))
g = unlist(lapply(strsplit(ord, '_'), function(x) x[2]))
g
g = unlist(lapply(strsplit(ord, '_'), function(x) x[2]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
g
#Set up plot
par(mfrow = c(length(ord),1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m2[i,], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
#title(main = ord[i], font.main = 1)
}
dev.off()
rownames(m2)
m2[match(ord[i], rownames(m2)),]
#Set up plot
par(mfrow = c(length(ord),1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m2[match(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
#title(main = ord[i], font.main = 1)
}
cols
unique(g)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
cols
m2[match(ord[i], rownames(m2)),]
grep(ord[i], rownames(m2))
ord[i]
grep(ord[i], paste(pred$Genus, pred$Species, sep = '_'))
grep(ord[i], paste(pred$Genus, pred$Species, sep = '_'))rown
rownames(x)
#Load phylogeny
phylo = read.newick('00_data/ho_et_al_2019/ho_2019_species_list_for_timetree.nwk')
#Generate matrix for calculate means by species
m2 = m
rownames(m2) = paste(taxa$Genus, taxa$Species, sep = '_')
#Split by species
m2 = split(as.data.frame(m2), rownames(m2))
#Calculate mean by species
m2 = lapply(m2, function(x) colMeans(x))
#Recombine
m2 = do.call(rbind, m2)
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Set up plot
par(mfrow = c(length(ord),1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
#title(main = ord[i], font.main = 1)
}
dev.off()
ica_res = ica(m2, nc = 20)
ica_res = ica::ica(m2, nc = 20)
ica_res = ica::ica(m2, nc = 10)
ica_res
plot(ica_res$S[,1])
?ica
plot(ica_res$S[,2])
plot(ica_res$S[,3])
plot(ica_res$S[,4])
plot(ica_res$S[,5])
#Generate phylogeny from spectra
spectra = as.phylo(nj(dist(ica_res$S[,1:10])))
#Cophyloplot
obj = cophylo(phylo, spectra)
plot(obj,
link.type="curved",
link.lwd=2,
link.col=make.transparent("grey",0.7))
s = ica_res$S[,1:10]
rownames(s) = rownames(m2)
spectra = as.phylo(nj(dist(s)))
plot(spectra)
#Cophyloplot
obj = cophylo(phylo, spectra)
plot(obj,
link.type="curved",
link.lwd=2,
link.col=make.transparent("grey",0.7))
phylosig_ics = apply(s[match(phylo$tip.label, rownames(s)),], 2, function(x) phylosig(phylo, x))
phylosig(ics)
phylosig_ics
plot(phylosig_ics)
dev.off()
plot(phylosig_ics)
?phylosig
phylosig_pcs = apply(pca$x[match(phylo$tip.label, rownames(pca$x)),], 2, function(x) phylosig(phylo, x, test = TRUE))
#By PCs
pca = prcomp(m2)
#Generate phylogeny from spectra
spectra = as.phylo(nj(dist(pca$x[,1:10])))
#Cophyloplot
obj = cophylo(phylo, spectra)
plot(obj,
link.type="curved",
link.lwd=2,
link.col=make.transparent("grey",0.7))
phylosig_pcs = apply(pca$x[match(phylo$tip.label, rownames(pca$x)),], 2, function(x) phylosig(phylo, x, test = TRUE))
phylosig_pcs
phylosig_pcs$PC1
phylosig_pcs$PC1$K
plot(phylo)
##Plot spectra
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Set up plot
par(mfrow = c(length(ord),1), mar = c(0.25, 0.25, 0.25, 0.25))
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add lines
for(j in 2:nrow(tmp)){
lines(tmp[j,], col = alpha(cols[i], 0.05))
}
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
#Add label
#title(main = ord[i], font.main = 1)
}
par(mfrow = c(1,3))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, seq(1, 1000, 100), round(wav[seq(1, 1000, 100)]), cex.axis = 1.5)
dev.off()
par(mfrow = c(1,3))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, seq(1, 1000, 100), round(wav[seq(1, 1000, 100)]), cex.axis = 1.5)
n = which(wav == seq(500, 1750, 250))
n
seq(500, 1750, 250)
wav
round(wav) == seq(500, 1750, 250)
round(wav)%in% seq(500, 1750, 250)
n = which(round(wav)%in% seq(500, 1750, 250))
n
par(mfrow = c(1,3))
n = which(round(wav)%in% seq(500, 1750, 250))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
length(n)
wav[n]
wav
?floor
signif(wav)
signif(wav, )
signif(wav, 1)
signif(wav, 2)
signif(wav, 3)
signif(wav, 4)
floor(wav)
n = which(floor(wav)%in% seq(500, 1750, 250))
n
wav[n]
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
n
par(mfrow = c(1,3))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
dev.off()
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#All by all cosine similarity
d = lsa::cosine(t(x))
#Distribution
hist(unlist(as.data.frame(d)))
#Compare taxonomic units
res = list()
for(i in 1:(ncol(pred)-1)){
tmp = split(as.data.frame(d), pred[,i])
for(j in 1:length(tmp)){
tmp[[j]] = tmp[[j]][,pred[,i]%in%names(tmp)[j]]
tmp[[j]] = tmp[[j]][!tmp[[j]] == 1]
tmp[[j]] = mean(tmp[[j]])
}
res[[colnames(pred)[i]]] = unlist(tmp)
}
#Plot
m1 = unlist(lapply(res, function(y) mean(y)))
se1 = unlist(lapply(res, function(y) plotrix::std.error(y)))
o = order(m1, decreasing = TRUE)
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(m1)]
plot(m1[o],
pch = 20,
cex = 2,
col = cols,
ylim = c(0.92, 0.97),
ylab = 'Cosine similarity',
xlab = '',
cex.lab = 1.5,
cex.axis = 1.5,
xaxt = 'n',
bty = 'n')
axis(1, 1:length(m1), names(m1)[o], cex.axis = 1.5, las = 2)
for(i in 1:length(se1)){
segments(i, m1[o][i]-se1[o][i], i, m1[o][i]+se1[o][i], col = cols[i], lwd = 1.5)
}
pca = prcomp(x)
par(mfrow = c(1,3))
plot(pca$x[,1:2])
dev.off()
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(taxa$Genus))]
names(cols) = unique(taxa$Genus)
cols = cols[match(taxa$Genus, names(cols))]
cols
taxa$Genus
taxa
pred = as.data.frame(cbind(apply(taxa, 2, function(x) rep(x, each = 100))))
pred = as.data.frame(cbind(apply(taxa, 2, function(x) rep(x, each = 100))))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(taxa$Genus))]
names(cols) = unique(taxa$Genus)
cols = cols[match(pred$Genus, names(cols))]
cols
plot(pca$x[,1:2], pch = 20, col = cols)
par(mfrow = c(1,3))
plot(pca$x[,1:2], pch = 20, col = cols, cex = 0.5)
par(mfrow = c(1,3))
plot(pca$x[,1:2], pch = 20, col = cols, cex = 0.5)
plot(pca$x[,2:3], pch = 20, col = cols, cex = 0.5)
plot(pca$x[,3:4], pch = 20, col = cols, cex = 0.5)
dev.off()
plot(pca$rotation[,1])
plot(pca$rotation[,2])
plot(pca$rotation[,3])
pred = as.data.frame(cbind(apply(taxa, 2, function(x) rep(x, each = 100))))
cols = WGCNA::standardColors(length(unique(pred$Strain)))
#cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(taxa$Genus))]
#names(cols) = unique(taxa$Genus)
names(cols) = unique(pred$Strain)
#cols = cols[match(pred$Genus, names(cols))]
cols = cols[match(pred$Strain, names(cols))]
par(mfrow = c(1,3))
plot(pca$x[,1:2], pch = 20, col = cols, cex = 0.5)
plot(pca$x[,2:3], pch = 20, col = cols, cex = 0.5)
plot(pca$x[,3:4], pch = 20, col = cols, cex = 0.5)
cols
summary(pca)
plot(cumsum((pca$sdev)^2/sum(((pca$sdev)^2)))[1:100]*100,
ylab = '% Variance explained',
xlab = 'n PCs',
pch = 20,
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
ylim = c(0,100))
u_all = umap(x, verbose = TRUE)
plot(u_all, pch = 20, col = cols, cex = 0.5)
plot(u_all$layout, pch = 20, col = cols, cex = 0.5)
dev.off()
plot(u_all$layout, pch = 20, col = cols, cex = 0.5)
#Plot
plot(u_all$layout,
pch = 20,
col = cols,
cex = 0.5,
xlab = 'Dim 1',
ylab = 'Dim 2',
cex.axis = 1.5,
cex.lab = 1.5)
#Set working directory
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
#Source utility functions
source('01_code/R/nonlinear_phenotype_utils.R')
#Source python script for generating synthetic genotype/phenotype data
source_python('01_code/python/tools_for_phen_gen_creation.py')
#Set working directory
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
#Source utility functions
source('01_code/R/nonlinear_phenotype_utils.R')
#Source python script for generating synthetic genotype/phenotype data
source_python('01_code/python/tools_for_phen_gen_creation.py')
library(reticulate)
pd <- import("pandas")
pickle_data <- pd$read_pickle("02_output/ppleio_pint_sweep/phen_pleio_int.pk")
phens <- pd$read_pickle("02_output/ppleio_pint_sweep/phen_pleio_int.pk")
phens
length(phens)
phens[[1]]
length(phens[[1]])
length(phens[[2]])
length(phens[[3]])
str(phens)
phens[[1]][[1]][[1]][[1]]
phens[[1]][[1]][[1]]
phens[[1]][[1]]
length(phens[[q]])
length(phens[[1]])
length(phens[[2]])
length(phens[[3]])
length(phens[[4]])
length(phens[[1]][[1]])
length(phens)
phens[[1]]
tmp = do.call(rbind, phens[[1]])
tmp
dim(tmp)
cor(tmp)
plot(tmp[1,])
tmp = do.call(cbind, phens[[1]])
cor(tmp)
head(tmp[,1])
head(tmp[,2])
head(tmp[,3])
tmp = do.call(cbind, phens[[2]])
head(tmp[,1])
head(tmp[,3])
cor(tmp)
hist(cor(tmp))
hist(cor(do.call(cbind, phens[[2]])))
hist(cor(do.call(cbind, phens[[3]])))
hist(cor(do.call(cbind, phens[[4]])))
hist(cor(do.call(cbind, phens[[5]])))
hist(cor(do.call(cbind, phens[[6]])))
hist(cor(do.call(cbind, phens[[11]])))
hist(cor(do.call(cbind, phens[[1]])))
#Set working directory
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
#Source utility functions
source('01_code/R/nonlinear_phenotype_utils.R')
#Source python script for generating synthetic genotype/phenotype data
source_python('01_code/python/tools_for_phen_gen_creation.py')
#Load pickled phenotype data
library(reticulate)
pd <- import("pandas")
phens <- pd$read_pickle("02_output/ppleio_pint_sweep/phen_pleio_int.pk")
length(phens)
rm(phens)
phens <- pd$read_pickle("02_output/ppleio_pint_sweep/phen_pleio_int.pk")
phens[[1]]
length(phens[[1]])
length(phens[[1]][[1]])
p_pleio = paste(rep('pleio', length(seq(0, 1, 0.1))), seq(0, 1, 0.1), sep = '')
pleio
p_pleio = paste(rep('pleio', length(seq(0, 1, 0.1))), seq(0, 1, 0.1), sep = '-')
p_pleio
p_int = paste(rep('int', length(seq(0, 1, 0.1))), seq(0, 1, 0.1), sep = '-')
p_int
#Generate naming vectors
p_pleio = paste(rep('pleio', length(seq(0, 1, 0.1))), seq(0, 1, 0.1), sep = '')
p_int = paste(rep('int', length(seq(0, 1, 0.1))), seq(0, 1, 0.1), sep = '')
i = 1
j = 1
paste(p_pleio[i], p_int[j], sep = '_')
gc()
dev.off()
do.call(cbind, phens[[i]][[j]])
phenos = list()
for(i in 1:length(phens)){
for(j in 1:length(phens[[i]])){
phenos[[paste(p_pleio[i], p_int[j], sep = '_')]] = do.call(cbind, phens[[i]][[j]])
}
}
phenos$pleio1_int1
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
#cat(counter, "\n")
compare_nonlinear(x)})
