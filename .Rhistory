len = sort(unlist(len))
#Violin plot
vioplot::vioplot(10,
traits$`Cyclidium glaucoma`$Length,
traits$`Colpoda steinii`$Length,
traits$`Halteria grandinella`$Length,
traits$Strombidium$Length,
traits$`Tetrahymena pyriformis`$Length,
traits$`Glaucoma sp.`$Length,
traits$`Urocentrum turbo`$Length,
traits$`Colpidium striatum`$Length,
traits$`Paramecium bursaria`$Length,
traits$`Blepharisma sp.`$Length,
traits$`Euplotes sp._x4`$Length,
traits$`Tillina magna_x4`$Length,
traits$`Tillina magna_x10`$Length,
traits$`Paramecium aurelia`$Length,
traits$`Euplotes sp._x10`$Length,
traits$`Paramecium caudatum`$Length,
traits$`Paramecium multimicronucleatum`$Length,
ylab = 'Length (microns)',
xlab = '',
names = c('Chalmydomonas rheinhardtii', names(len)),
cex.axis = 1.5,
cex.lab = 1.5,
las = 2,
col = 'gray60',
border = 'gray90',
ylim = c(0, 350))
points(1, 10, pch = 20, cex = 2)
abline(h = 20, lty = 'dashed', col = 'gray50')
abline(h = 75, lty = 'dashed', col = 'gray50')
abline(h = 200, lty = 'dashed', col = 'gray50')
#Sweep n of important alleles
toTest = 1:100
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(100),
n_phens = as.integer(10))}
#Set working directory
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
#Source utility functions
source('01_code/R/nonlinear_phenotype_utils.R')
#Source python script for generating synthetic genotype/phenotype data
source_python('01_code/python/tools_for_phen_gen_creation.py')
####################################################################################
#####Sweeping number of important alleles; independent genotypes and phenotypes#####
####################################################################################
#Sweep n of important alleles
toTest = 1:100
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(100),
n_phens = as.integer(10))}
make_genotype()
make_genotype
i
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(1000),
n_phens = as.integer(10))}
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(100),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = 1:100
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(200),
n_phens = as.integer(10))}
toTest = 1:100
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
n_loci = as.integer(1000),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = 1:100
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(i),
#n_loci = as.integer(1000),
n_phens = as.integer(10))}
make_genotype
Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = 100,
p_pleio = as.integer(toTest[i]),
n_loci = as.integer(1000),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
n_loci = as.integer(1000),
n_phens = as.integer(10))}
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
n_phens = as.integer(10))}
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(10))}
#Combine phenotypes
phenos = lapply(out, function(x) do.call(cbind, x[[3]]))
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
#cat(counter, "\n")
compare_nonlinear(x)})
out
phenos = lapply(out, function(x) do.call(cbind, x[[3]]))
out$`0`[[1]]
out$`0`[[1]][[3]]
out$`0`[[1]][[4]]
str(out)
str(out$`0`)
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(10),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(10))}
phenos = lapply(out, function(x) do.call(cbind, x[[3]]))
str(out$`0.1`)
out$`0`[[1]]
out$`0`[[2]]
out$`0`[[3]]
out$`0`[[3]][,,1]
out$`0`[[3]][,,2]
out$`0`[[3]][,,3]
out$`0`[[4]]
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
#cat(counter, "\n")
compare_nonlinear(x)})
res
#Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(10),
n_animals = 100,
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(10),
n_animals = 100,
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(10),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Combine phenotypes
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
#cat(counter, "\n")
compare_nonlinear(x)})
res
cor(phenos$`0`)
cor(phenos$`0.5`)
cor(phenos$`1.0`)
cor(phenos$`0.9`)
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(1000),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Combine phenotypes
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(1),
n_phens = as.integer(10))}
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(10))}
#Combine phenotypes
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
#cat(counter, "\n")
compare_nonlinear(x)})
res
cor(phenos$`0.6`)
plot(phenos$`0`)
plot(phenos$`1`)
plot(phenos$`2`)
plot(phenos$`0.5`[,1])
plot(phenos$`0.5`[,2])
plot(phenos$`0.5`[,3])
plot(phenos$`0.5`[,4])
hist(phenos$`0.5`[,4])
phenos$`0`
phenos$`1`
cor(phenos$`1`)
hist(cor(phenos$`1`))
#Set working directory
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
#Source utility functions
source('01_code/R/nonlinear_phenotype_utils.R')
#Source python script for generating synthetic genotype/phenotype data
source_python('01_code/python/tools_for_phen_gen_creation.py')
#Sweep n of important alleles
toTest = seq(0, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(10))}
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
cor(phenos$`0`)
cor(phenos$`0.5`)
hist(cor(phenos$`0.5`))
hist(cor(phenos$`0.9`))
hist(cor(phenos$`1`))
cor(phenos$`1`)
cor(phenos$`0.9`)
hist(cor(phenos$`0.9`))
#Sweep n of important alleles
toTest = seq(0.9, 1, 0.1)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(100))}
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
hist(cor(phenos$`0.9`))
hist(cor(phenos$`1`))
#Sweep n of important alleles
toTest = seq(0.9, 1, 0.01)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(1000),
p_interact = as.integer(0),
n_phens = as.integer(100))}
#Combine phenotypes
phenos = lapply(out, function(x) do.call(cbind, x[[4]]))
hist(phenos$`0.93`)
hist(cor(phenos$`0.93`))
hist(cor(phenos$`0.94`))
hist(cor(phenos$`0.95`))
hist(cor(phenos$`0.96`))
hist(cor(phenos$`0.97`))
hist(cor(phenos$`0.99`))
hist(cor(phenos$`1`))
phenos$`1`
#Sweep n of important alleles
toTest = seq(0.9, 1, 0.01)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
n_loci = as.integer(100),
p_interact = as.integer(0),
n_phens = as.integer(10))}
phenos
hist(cor(phenos$`0.97`))
toTest = seq(0.9, 1, 0.01)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
n_loci = as.integer(100),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = seq(0.9, 1, 0.01)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(100),
p_interact = as.integer(1),
n_phens = as.integer(10))}
#Sweep n of important alleles
toTest = seq(0.9, 1, 0.01)
out = list()
pb <- txtProgressBar(min = 1,
max = length(toTest),
style = 3,
width = 50,
char = ".")
for(i in 1:length(toTest)){
setTxtProgressBar(pb, i)
out[[as.character(toTest[i])]] = make_genotype(n_loci_ip = as.integer(100),
p_pleio = as.integer(toTest[i]),
#n_loci = as.integer(100),
p_interact = as.integer(0.5),
n_phens = as.integer(10))}
hist(cor(phenos$`0.97`))
phenos$`1`
phenos$`0.99`
plot(phenos$`0.99`[,1])
plot(phenos$`0.99`[,2])
plot(phenos$`0.99`[,3])
