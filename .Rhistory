order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)
points(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)),
col = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
cex = 1.5,
pch = 20)
points(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)),
col = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
cex = 2,
pch = 20)
plot(unlist(a_smooth),
unlist(slopes),
xlab = '% nonlinear',
ylab = 'Entropy fit (slope)',
cex.lab = 1.5,
cex.axis = 1.5,
cex = 0.75,
pch = 20,
col = 'gray80')
points(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)),
bg = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
col = darken_color(cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)]),
cex = 2,
pch = 20)
plot(unlist(a_smooth),
unlist(slopes),
xlab = '% nonlinear',
ylab = 'Entropy fit (slope)',
cex.lab = 1.5,
cex.axis = 1.5,
cex = 0.75,
pch = 20,
col = 'gray80')
points(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)),
bg = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
col = darken_color(cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)]),
cex = 2,
pch = 21)
tmp = read.csv('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/02_output/all_jax_phenotypes.csv')
tmp = read.csv('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/02_output/empirical-phenotypes/all_jax_phenotypes.csv')
head(tmp)
#Set working directory
setwd('~/Desktop/nonlinear_phenotype_review/00_data/empirical/mouse/jax_phenotypes/')
#Load
dat = read.csv('strainmeans.csv')
#Get all strains
strains = unique(dat$strainid)
#Split on phenotype
x = split(dat, dat$varname)
#Match on strains
for(i in 1:length(x)){
x[[i]] = x[[i]][match(strains, x[[i]]$strainid),]
}
#Combine
phenos = as.data.frame(do.call(cbind, lapply(x, function(y) y$zscore)))
rownames(phenos) = strains
#Filter strains
strains = strains[apply(phenos, 1, function(x) sum(!is.na(x)))>100]
phenos = phenos[apply(phenos, 1, function(x) sum(!is.na(x)))>100,]
#Filter phenotypes
strains = strains[,apply(phenos, 2, function(x) sum(!is.na(x)))>100]
strains
head(dat)
#Get all strains
strains = unique(dat$strainid)
s = dat$strain
#Split on phenotype
x = split(dat, dat$varname)
#Match on strains
for(i in 1:length(x)){
x[[i]] = x[[i]][match(strains, x[[i]]$strainid),]
}
#Combine
phenos = as.data.frame(do.call(cbind, lapply(x, function(y) y$zscore)))
rownames(phenos) = strains
#Filter strains
s = s[apply(phenos, 1, function(x) sum(!is.na(x)))>100]
phenos = phenos[apply(phenos, 1, function(x) sum(!is.na(x)))>100,]
#Filter phenotypes
s = s[,apply(phenos, 2, function(x) sum(!is.na(x)))>100]
#Filter s
s = s[apply(phenos, 1, function(x) sum(!is.na(x)))>100]
phenos = phenos[apply(phenos, 1, function(x) sum(!is.na(x)))>100,]
s
head(dat)
length(unique(s))
ara$unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios))
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios))
plot(c(15, 4, 517, 1, 1, 2, 1),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)))
plot(log(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)))
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)))
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
slopes)
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)))
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
pch = 21,
bg = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
col = darken_color(cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)]),
cex = 2)
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
ylab = '% nonlinear',
xlab = 'log10 (n populations)',
cex.axis = 1.5,
cex.lab = 1.5,
pch = 21,
bg = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
col = darken_color(cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)]),
cex = 2)
abline(lm(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios))~log10(c(15, 4, 517, 1, 1, 2, 1))))
cor(lm(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),log10(c(15, 4, 517, 1, 1, 2, 1))))
cor(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),log10(c(15, 4, 517, 1, 1, 2, 1)))
plot(log10(c(15, 4, 517, 1, 1, 2, 1)),
unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)),
ylab = '% nonlinear',
xlab = 'log10 (n populations)',
cex.axis = 1.5,
cex.lab = 1.5,
pch = 21,
bg = cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)],
col = darken_color(cols[order(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios)), decreasing = TRUE)]),
cex = 2)
abline(lm(unlist(lapply(nonlinear, function(x) x$nonlinearity_aic_ratios))~log10(c(15, 4, 517, 1, 1, 2, 1))),
lty = 'dashed')
?vioplot
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
horiztonal = TRUE,
names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
horiztonal = TRUE,
#names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
horiztonal = TRUE,
names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
nonlinear_permutations = nonlinear_permutations[order(unlist(lapply(nonlinear_permutations, function(x) mean(x))), decreasing = TRUE)]
cols = c(arcadia.pal(n = 6, name = 'Accent'), 'gray50')
names(cols) = names(nonlinear_permutations)
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
horiztonal = TRUE,
names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
names(nonlinear_permutations)
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
vioplot::vioplot(nonlinear_permutations[[1]],
nonlinear_permutations[[2]],
nonlinear_permutations[[3]],
nonlinear_permutations[[4]],
nonlinear_permutations[[5]],
nonlinear_permutations[[6]],
nonlinear_permutations[[7]],
col = cols,
side = "right",
border = darken_color(cols),
ylab = '% nonlinear',
xlab = '',
las = 2,
names = names(nonlinear_permutations),
cex.axis = 1.5,
cex.lab = 1.5)
stripchart(nonlinear_permutations,
col = cols,
at = seq(0.8, (length(nonlinear_permutations)-1)+0.8, 1),
jitter = 0.1,
method = "jitter",
vertical = TRUE,
cex = 1,
pch = 20,
add = TRUE)
plot(seq(0.1, 0.9, 0.1),
colMeans(do.call(cbind, nonlinear$yeast$subsampled_entropy_results[[1]]$entropies)),
type = 'l',
ylim = c(0, 7),
col = cols[1],
lwd = 1.5,
ylab = 'Entropy (bits)',
xlab = 'Proportion of phenotypes',
cex.axis = 1.5,
cex.lab = 1.5)
for(i in 2:length(nonlinear)){
lines(seq(0.1, 0.9, 0.1),
colMeans(do.call(cbind, nonlinear[[i]]$subsampled_entropy_results[[1]]$entropies)), col = cols[i], lwd = 1.5)
}
plot(unlist(lapply(nonlinear, function(x) x$n_phenotypes)),
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)))
barplot(unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)))
unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
e = unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
e = e[order(e, decreasing = TRUE)]
e
barplot(e)
plot(unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes)), type = 'b')
e = unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
o = order(e, decreasing = TRUE)
e = e[o]
plot(e,
pch = 20,
cex = 2,
col = cols[o])
cols
e = unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
names(e) = names(nonlinear)
e
e = unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
names(e) = names(nonlinear)
plot(e,
pch = 20,
cex = 2,
col = cols[match(names(e), names(cols))])
e = unlist(lapply(nonlinear, function(x) x$subsampled_entropy_slopes))
names(e) = names(nonlinear)
o = order(e, decreasing = TRUE)
e = e[o]
plot(e,
pch = 20,
cex = 2,
col = cols[match(names(e), names(cols))])
plot(e,
pch = 20,
cex = 2,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = 'Entropy fit (slope)')
plot(e,
pch = 20,
cex = 2,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
names = names(e),
ylab = 'Entropy fit (slope)')
plot(e,
pch = 20,
cex = 2,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
xaxt = 'n',
ylab = 'Entropy fit (slope)')
plot(e,
pch = 20,
cex = 3,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
xaxt = 'n',
xlab = '',
ylab = 'Entropy fit (slope)',
bty = 'n')
axis(1:length(e), names(e))
length(e)
names(e)
?axis
axis(1, 1:length(e), names(e))
axis(1,
1:length(e), names(e),
cex.axis = 1.5,
col.font = cols[match(names(e), names(cols))])
axis(1,
1:length(e), names(e),
cex.axis = 1.5,
las = 2)
?abline
for(i in 1:length(e)){
lines(x = i, y = e[i], col = cols[match(names(e), names(cols))][i], lwd = 1.5)
}
plot(e,
pch = 20,
cex = 3,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
xaxt = 'n',
xlab = '',
ylab = 'Entropy fit (slope)',
bty = 'n')
axis(1,
1:length(e), names(e),
cex.axis = 1.5,
las = 2)
for(i in 1:length(e)){
lines(x = i, y = e[i], col = cols[match(names(e), names(cols))][i], lwd = 1.5)
}
e[1]
lines(1, 0.3)
abline(v = 1)
segments(i, 0, i, y = e[i], col = cols[match(names(e), names(cols))][i], lwd = 1.5)
?segements
segments(i, 0, i, e[i], col = cols[match(names(e), names(cols))][i], lwd = 1.5)
plot(e,
pch = 20,
cex = 3,
col = cols[match(names(e), names(cols))],
ylim = c(0, 0.35),
cex.lab = 1.5,
cex.axis = 1.5,
xaxt = 'n',
xlab = '',
ylab = 'Entropy fit (slope)',
bty = 'n')
axis(1,
1:length(e), names(e),
cex.axis = 1.5,
las = 2)
for(i in 1:length(e)){
segments(i, 0, i, e[i], col = cols[match(names(e), names(cols))][i], lwd = 1.5)
}
setwd('~/Desktop/nonlinear_phenotype_review/00_data/empirical/mouse/qtlarchive_phenotypes/')
files = list.files()
i = 1
setwd('~/Desktop/nonlinear_phenotype_review/00_data/empirical/mouse/qtlarchive_phenotypes/')
files = list.files()
qtlarchive = list()
tmp = read.csv(files[i])
tmp
tmp = gsub('-', NA, tmp)
tmp
tmp = as.data.frame(read.csv(files[i]))
tmp = gsub('-', NA, tmp)
tmp
tmp = as.data.frame(read.csv(files[i]))
tmp = gsub('-', '', tmp)
tmp
?apply
tmp = as.data.frame(read.csv(files[i]))
tmp = apply(tmp, 2, function(x) gsub('-', '', x))
tmp
tmp = as.data.frame(read.csv(files[i]))
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = data.matrix(tmp)
tmp
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = data.matrix(tmp)
for(j in 1:ncol(tmp)){
x = which(is.na(tmp [,j]))
tmp [x,j] = mean(tmp [,j], na.rm = TRUE)
}
warnings()
tmp
x
j -= 1
j = 1
which(is.na(as.numeric(tmp [,j])))
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = data.matrix(tmp)
for(j in 1:ncol(tmp)){
tmp[,j] = as.numeric(tmp[,j])
x = which(is.na(as.numeric(tmp [,j])))
tmp [x,j] = mean(as.numeric(tmp [,j]), na.rm = TRUE)
}
warnings()
tmp
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = data.matrix(tmp)
for(j in 1:ncol(tmp)){
tmp[,j] = as.numeric(tmp[,j])
x = which(is.na(as.numeric(tmp [,j])))
tmp [x,j] = mean(as.numeric(tmp [,j]), na.rm = TRUE)
tmp[,j] = as.numeric(tmp[,j])
}
tmp
tmp[,1]
data.matrix(tm)
data.matrix(tmp)
as.data.frame(tmp)
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = as.data.frame(tmp)
for(j in 1:ncol(tmp)){
tmp[,j] = as.numeric(tmp[,j])
x = which(is.na(as.numeric(tmp [,j])))
tmp [x,j] = mean(as.numeric(tmp [,j]), na.rm = TRUE)
}
tmp
files = list.files()
qtlarchive = list()
for(i in 1:length(files)){
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = as.data.frame(tmp)
for(j in 1:ncol(tmp)){
tmp[,j] = as.numeric(tmp[,j])
x = which(is.na(as.numeric(tmp [,j])))
tmp [x,j] = mean(as.numeric(tmp [,j]), na.rm = TRUE)
}
tmp = apply(tmp, 2, function(x) RankNorm(x))
tmp = tmp[,apply(tmp, 2, function(x) length(unique(x)))>5]
qtlarchive[[files[i]]] = tmp
}
tmp
i
files[i]
setwd('~/Desktop/nonlinear_phenotype_review/00_data/empirical/mouse/qtlarchive_phenotypes/')
files = list.files()
qtlarchive = list()
for(i in 1:length(files)){
tmp = read.csv(files[i])
tmp = apply(tmp, 2, function(x) gsub('-', 'NA', x))
tmp = as.data.frame(tmp)
for(j in 1:ncol(tmp)){
tmp[,j] = as.numeric(tmp[,j])
x = which(is.na(as.numeric(tmp [,j])))
tmp [x,j] = mean(as.numeric(tmp [,j]), na.rm = TRUE)
}
tmp = apply(tmp, 2, function(x) RankNorm(x))
tmp = tmp[,apply(tmp, 2, function(x) length(unique(x)))>5]
qtlarchive[[files[i]]] = tmp
}
i
qtlarchive
saveRDS(qtlarchive, '02_output/qtlarchive_cleaned_phenos.RDS')
setwd('~/Documents/Research/github/accounting-for-nonlinear-phenotypes/')
saveRDS(qtlarchive, '02_output/qtlarchive_cleaned_phenos.RDS')
qtlarch = readRDS('02_output/empirical-phenotypes/qtlarchive_cleaned_phenos.RDS')
out = lapply(qtlarch, function(x) nonlinear.permutation(x, data_proportion = 0.25, permutation_number = 100))
out = lapply(qtlarch, function(x) nonlinear.permutation(x, data_proportion = 0.25, permutation_number = 10))
out
out = compute.phenotype.stats(qtlarch, run_nonlinear = TRUE, sample_sizes = seq(0.1, 0.9, 0.1))
out
out$subsampled_entropy_slopes
out$nonlinearity_aic_ratios
plot(out$subsampled_entropy_slopes, out$nonlinearity_aic_ratios)
plot(out$nonlinearity_aic_ratios, out$subsampled_entropy_slopes)
